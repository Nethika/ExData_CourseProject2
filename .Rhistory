json2
homeTL
json1
json1[1]
?connections
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "5ffc20fc2a904a70aff7",
secret = "b8b050af7925efc91b19cfb1b320019b74d7cfb7")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
length(req)
req[1]
req[2]
req[3]
req[4]
req[5]
req[6]
req[7]
req[8]
req[9]
req[10]
req[11]
repo_list <- content(req)
length(repo_list)
repo_list[1]
repo_list[[1]]
answer1 <- c()
for (i in 1:length(repo_list)) {
repo <- repo_list[[i]]
if (repo$name == "datasharing") {
answer1 = repo
break
}
}
answer1
answer1$created_at
library(sqldf)
fname <- "survey.csv"
download_if_not_exists(fname,"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file(fname,"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv")
download.file(url='https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv',
destfile='survey.csv', method='curl')
acs <- read.csv(fname, header = TRUE, sep = ",")
View(acs)
sqldf("select pwgtp1 from acs where AGEP < 50")
sqldf("select pwgtp1,AGEP from acs where AGEP < 50")
sqldf("select * from acs where AGEP < 50 and pwgtp1")
unique(acs$AGEP)
sqldf("select unique AGEP from acs")
sqldf("select distinct AGEP from acs")
con=url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode=readLines(con)
length(htmlCode)
htmlCode
htmlCode[0]
htmlCode[1]
nchar(htmlCode[1])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
fname <- "data.for"
download.file(url='https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for',
destfile=fname, method='curl')
dframe <- read.csv(fname, header = TRUE, sep = ",")
View(dframe)
dframe <- read.fwf(fname)
col_seq <- c(-5, 4, 4)
fname
df <- read.fwf(fname,
widths = c(-1, 9, col_seq, col_seq, col_seq, col_seq),
skip = 4)
View(DF)
View(df)
View(DF)
View(df)
View(dframe)
View(df)
answer5 <- sum(df[, 4])
answer5
set.seed(13435)
X<-data.frame("var1"=sample(1:5),"var2"=sample(6:10), "var3"=sample(11:15))
ls
X
X<-X[sample(1:5),]
X
X<-X[sample(1:3),]
X
X
X
X<-data.frame("var1"=sample(1:5),"var2"=sample(6:10), "var3"=sample(11:15))
X
X<-X[sample(1:5),]
X
X$var2[c(1,3)]=NA
X
X[,1]
X[,0]
X[,2]
X[,3]
X[,"var1"]
X[1,]
x[1:2,]
X[1:2,]
X[1:2,2]
X[1:2,3]
X
Y<-rbind(X,rnorm(5))
Y
Y<-cbind(X,rnorm(5))
Y
Y<-cbind(X,rnorm(2))
Y<-cbind(X,rnorm(7))
Y<-cbind(X,rnorm(5))
Y
Y<-cbind(rnorm(5),X)
Y
Y<-rbind(rnorm(5),X)
Y
Y<-rbind(X,rnorm(5))
Y
install.packages("RPostgreSQL")
require(RPostgreSQL)
rm(list=ls(all=TRUE))
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
data <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv",destfile='data.csv')
data<-read.csv("data.csv")
View(data)
agricultureLogical <- (survey$ACR == 3 & survey$AGS == 6)
agricultureLogical <- (data$ACR == 3 & data$AGS == 6)
which(agricultureLogical)
library("jpeg")
install.packages("jpeg")
library(jpeg)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg",destfile='pic.jpg')
picture <- readJPEG('pic.jpg', native = TRUE)
quantile(picture, c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv",destfile='gdp.csv')
gdp<-read.csv("gdp.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv",destfile='edu.csv')
edu<-read.csv("edu.csv")
View(edu)
View(gdp)
merged <- merge(gdp, edu, all = TRUE, by = "CountryCode")
View(edu)
gdp <- read.csv(fname, skip = 4, nrows = 215) %>%
subset(!is.na(X) & X != "", select = c("X", "X.1", "X.3", "X.4")) %>%
rename(CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
gdp <- read.csv("gdp.csv", skip = 4, nrows = 215) %>% subset(!is.na(X) & X != "", select = c("X", "X.1", "X.3", "X.4")) %>% rename(CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
gdp <- read.csv("gdp.csv", skip = 4, nrows = 215)
gdp <- subset(gdp,!is.na(X) & X != "", select = c("X", "X.1", "X.3", "X.4"))
gdp <- rename(gdp,CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
library(dplyr)
gdp <- rename(gdp,CountryCode = X, rankingGDP = X.1, Long.Name = X.3, gdp = X.4)
View(gdp)
merged <- merge(gdp, edu, all = TRUE, by = "CountryCode")
sum(!is.na(unique(merged$rankingGDP)))
sorted <- subset(merged, select = c(rankingGDP, Long.Name.x))
sorted[order(answer3.2$rankingGDP, decreasing = TRUE), "Long.Name.x"][13]
sorted[order(sorted$rankingGDP, decreasing = TRUE), "Long.Name.x"][13]
avg_rank <- function(label) {
income_group <- subset(merged, merged$Income.Group == label)
mean(as.numeric(income_group$rankingGDP), na.rm = TRUE)
}
answer4.oecd <- avg_rank("High income: OECD")
answer4.non.oecd <- avg_rank("High income: nonOECD")
msg("High income OECD:", answer4.oecd, "High income nonOECD:", answer4.non.oecd)
answer4.oecd
answer4.non.oecd
DT <- subset(merged, select = c(Income.Group, rankingGDP)) %>%
mutate(quantileGDP = cut2(rankingGDP, g = 5)) %>%
data.table
install.packages("Hmisc")
library(Hmisc)
DT <- subset(merged, select = c(Income.Group, rankingGDP)) %>%
mutate(quantileGDP = cut2(rankingGDP, g = 5)) %>%
data.table
library(data.table)
DT <- subset(merged, select = c(Income.Group, rankingGDP)) %>%
mutate(quantileGDP = cut2(rankingGDP, g = 5)) %>%
data.table
View(DT)
answer5 <- DT[Income.Group == "Lower middle income", .N,
by = c("Income.Group", "quantileGDP")] %>%
subset(quantileGDP == "[  1, 39)", select = N)
View(answer5)
library(swirl)
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
View(cran)
cran
help(group_by())
help(group_by)
by_package <- group_by(cran,"package")
by_package <- group_by(cran,package)
by_package
summarize(by_package,mean(size))
View(by_package)
summarize(by_package,mean(size))
info()
summarize(by_package,size=mean(size))
help("summarize")
library(plyr)
library(Hmisc)
summarize(by_package,size=mean(size))
summarize(by_package,mean(size))
by_package <- group_by(cran,package)
package
by_package
tbl_df
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
pack_sum <- summarize(by_package,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
pack_sum
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
detach("package:plyr", unload=TRUE)
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
library(dplyr)
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
pack_sum <- summarise(by_package,
count = n() ,
unique = n_distinct(ip_id) ,
countries = n_distinct(country) ,
avg_bytes = mean(size))
pack_sum
submit()
submit()
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs =0.99)
top_unique <- filter(pack_sum, unique>465)
View(top_unique)
top_unique_sorted <- arrange(top_unique,desc(count))
top_unique_sorted <- arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
View(result3)
cran %>%
select() %>%
print
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
View(students2)
gather(students2, sex_class, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
library(readr)
parse_number("class5").
?parse_number
parse_number(class5).
parse_number
parse_number("$1000")
parse_number("sgsg1000")
parse_number("class1000")
parse_number("class5")
submit()
submit()
students4
getwd()
submit()
submit()
submit()
passed
failed
mutate(passed,status="passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
sat
submit()
?group_by
submit()
Help > Check for Updates
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
swirl()
dist(dataFrame)
View(dataFrame)
View(dataMatrix)
hc <- hclust(distxy)
plot(hc)
distxy
getwd()
setwd("~/coursera")
getwd()
plot(as.dendrogram(hc))
abline(h=1.5 , col="blue")
abline(h=0.4 , col="red")
5
abline(h=0.05 , col="red")
12
abline(h=0.05 , col="green")
dist(dFsm)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap(mt)
mt
class(mt)
plot(denmt)
distmt
cmat
points (cx,cy,col=c("red", "orange","purple"),pch=3+,cex=2,lwd=2)
points (cx,cy,col=c("red", "orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
View(mdist)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,pch=8,cex=2,col=cols1,lwd=2)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x, y, newCx, newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
kmObj$cluster
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers, col=c("black","red","green"),pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
points(kmObj$centers, col=c("black","red","green"),pch=3, cex=3, lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
setwd("~/ExData_CourseProject2")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile='data')
unzip ("data", exdir = "./")
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
rm(list = ls())
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
aggSum <- aggregate(Emissions ~ year,NEI, sum)
png("plot1.png",width=480,height=480,units="px",bg="transparent")
barplot(
(aggSum$Emissions)/10^6,
names.arg=aggTotals$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
barplot(
(aggSum$Emissions)/10^6,
names.arg=aggSum$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
dev.off()
barplot(
(aggSum$Emissions)/10^6,
names.arg=aggSum$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
dev.copy(png, file="plot2.png", width=480, height=480)
dev.off()
barplot(
(aggSum$Emissions)/10^6,
names.arg=aggSum$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
units="px",
bg="transparent"
)
barplot(
(aggSum$Emissions)/10^6,
names.arg=aggSum$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources",
units="px",
bg="transparent"
)
png("plot1.png",width=480,height=480,units="px",bg="transparent")
barplot(
(aggSum$Emissions)/10^6,
names.arg=aggSum$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
dev.off()
print("plot1.png is created")
# Subset NEI data by Baltimore's fip.
baltimoreNEI <- NEI[NEI$fips=="24510",]
# Aggregate using sum the Baltimore emissions data by year
aggTotalsBaltimore <- aggregate(Emissions ~ year, baltimoreNEI,sum)
barplot(
aggTotalsBaltimore$Emissions,
names.arg=aggTotalsBaltimore$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From all Baltimore City Sources"
)
png("plot1.png",width=480,height=480,units="px",bg="transparent")
barplot(
(aggSum$Emissions)/10^6,
names.arg=aggSum$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
lines ((aggSum$Emissions)/10^6)
dev.off()
png("plot1.png",width=480,height=480,units="px",bg="transparent")
barplot(
(aggSum$Emissions)/10^6,
names.arg=aggSum$year,
xlab="Year",
ylab="PM2.5 Emissions (10^6 Tons)",
main="Total PM2.5 Emissions From All US Sources"
)
dev.off()
print("plot1.png is created")
baltimoreNEI <- NEI[NEI$fips=="24510",]
# Aggregate using sum the Baltimore emissions data by year
aggSumBaltimore <- aggregate(Emissions ~ year, baltimoreNEI,sum)
png("plot2.png",width=480,height=480,units="px",bg="transparent")
barplot(
aggSumBaltimore$Emissions,
names.arg=aggSumBaltimore$year,
xlab="Year",
ylab="PM2.5 Emissions (Tons)",
main="Total PM2.5 Emissions From all Baltimore City, Maryland"
)
dev.off()
library(ggplot2)
agg_type_year <- aggregate(NEI$Emissions, list(NEI$type, NEI$year),mean)
g <- ggplot(agg_type_year, aes(y=x, x=Group.2))+geom_point(aes(colour = factor(Group.1)), size = 4)
g+geom_line(aes(group=Group.1,colour=Group.1))
dev.copy(png, file="plot3.png", width=480, height=480)
dev.off()
agg_type_year <- aggregate(NEI$Emissions, list(NEI$type, NEI$year),mean)
g <- ggplot(agg_type_year, aes(y=x, x=Group.2))+geom_point(aes(colour = factor(Group.1)), size = 4)
g+geom_line(aes(group=Group.1,colour=Group.1)) + labs(title="Four Sources of PM2.5 Emmisions for Baltimore City", y="Emissions for Baltimore City ",x="Year (1999 - 2008)")
sub_emissions<- subset(NEI,fips="24510")
g<-ggplot(sub_emissions,aes(year,Emissions,color=type))
g+geom_line(stat = "summary",fun.y="sum")+ labs(title="Four Sources of PM2.5 Emmisions for Baltimore City", y="PM 2.5 Emissions (Tons) ",x="Year")
sub_emissions<- subset(NEI,fips="24510")
g<-ggplot(sub_emissions,aes(year,Emissions/10^6,color=type))
g+geom_line(stat = "summary",fun.y="sum")+ labs(title="Four Sources of PM2.5 Emmisions for Baltimore City", y="PM 2.5 Emissions (10^6 Tons) ",x="Year")
View(NEI)
View(SCC)
View(NEI)
View(NEI)
g<-ggplot(sub_emissions,aes(year,Emissions/10^6,color=type))
g+geom_line()+geom_point(size = 4)+ labs(title="Four Sources of PM2.5 Emmisions for Baltimore City", y="PM 2.5 Emissions (10^6 Tons) ",x="Year")
